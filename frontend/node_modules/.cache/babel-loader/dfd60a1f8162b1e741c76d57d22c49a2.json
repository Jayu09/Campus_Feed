{"ast":null,"code":"import _regeneratorRuntime from \"/home/jayu/Desktop/my-project/my_campus/frontend/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(viewPosts),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updatePost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deletePost);\n\nimport * as effect from \"redux-saga/effects\";\nimport * as typ from \"../actions\";\nimport { addPosts, getPosts, editPost, remove } from \"../api/apiPosts\";\nexport function addPost(action) {\n  var api;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return effect.call(addPosts, action);\n\n        case 3:\n          api = _context.sent;\n          _context.next = 6;\n          return effect.put({\n            type: typ.ADD_POST,\n            payload: api\n          });\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          alert(\"error\" + _context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function viewPosts() {\n  var data;\n  return _regeneratorRuntime.wrap(function viewPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return effect.call(getPosts);\n\n        case 3:\n          data = _context2.sent;\n          _context2.next = 6;\n          return effect.put({\n            type: typ.VIEW_POST,\n            payload: data\n          });\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          alert(\"error\" + _context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nexport function updatePost(action) {\n  return _regeneratorRuntime.wrap(function updatePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return effect.call(editPost, action);\n\n        case 3:\n          _context3.next = 5;\n          return effect.put({\n            type: typ.POST\n          });\n\n        case 5:\n          _context3.next = 10;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          alert(\"error\" + _context3.t0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\nexport function deletePost(action) {\n  return _regeneratorRuntime.wrap(function deletePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return effect.call(remove, action);\n\n        case 3:\n          _context4.next = 5;\n          return effect.put({\n            type: typ.POST\n          });\n\n        case 5:\n          _context4.next = 10;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          alert(\"error\" + _context4.t0);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}","map":{"version":3,"sources":["/home/jayu/Desktop/my-project/my_campus/frontend/src/sagas/postSaga.js"],"names":["addPost","viewPosts","updatePost","deletePost","effect","typ","addPosts","getPosts","editPost","remove","action","call","api","put","type","ADD_POST","payload","alert","data","VIEW_POST","POST"],"mappings":";;;;yBAIiBA,O;;;yBASAC,S;;;yBASAC,U;;;yBASAC,U;;AA/BjB,OAAO,KAAKC,MAAZ,MAAwB,oBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,QAAR,EAAmBC,QAAnB,EAA6BC,QAA7B,EAAuCC,MAAvC,QAAoD,iBAApD;AAEA,OAAO,SAAUT,OAAV,CAAkBU,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMN,MAAM,CAACO,IAAP,CAAYL,QAAZ,EAAsBI,MAAtB,CAAN;;AAFR;AAEGE,UAAAA,GAFH;AAAA;AAGH,iBAAMR,MAAM,CAACS,GAAP,CAAW;AAAEC,YAAAA,IAAI,EAAET,GAAG,CAACU,QAAZ;AAAsBC,YAAAA,OAAO,EAAEJ;AAA/B,WAAX,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHK,UAAAA,KAAK,CAAC,qBAAD,CAAL;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUhB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU,iBAAMG,MAAM,CAACO,IAAP,CAAYJ,QAAZ,CAAN;;AAFV;AAEGW,UAAAA,IAFH;AAAA;AAGH,iBAAMd,MAAM,CAACS,GAAP,CAAW;AAAEC,YAAAA,IAAI,EAAET,GAAG,CAACc,SAAZ;AAAuBH,YAAAA,OAAO,EAAEE;AAAhC,WAAX,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHD,UAAAA,KAAK,CAAC,sBAAD,CAAL;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUf,UAAV,CAAqBQ,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMN,MAAM,CAACO,IAAP,CAAYH,QAAZ,EAAsBE,MAAtB,CAAN;;AAFG;AAAA;AAGH,iBAAMN,MAAM,CAACS,GAAP,CAAW;AAAEC,YAAAA,IAAI,EAAET,GAAG,CAACe;AAAZ,WAAX,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHH,UAAAA,KAAK,CAAC,sBAAD,CAAL;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUd,UAAV,CAAqBO,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMN,MAAM,CAACO,IAAP,CAAYF,MAAZ,EAAqBC,MAArB,CAAN;;AAFG;AAAA;AAGH,iBAAMN,MAAM,CAACS,GAAP,CAAW;AAAEC,YAAAA,IAAI,EAAET,GAAG,CAACe;AAAZ,WAAX,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHH,UAAAA,KAAK,CAAC,sBAAD,CAAL;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as effect from \"redux-saga/effects\";\nimport * as typ from \"../actions\";\nimport {addPosts , getPosts ,editPost ,remove} from \"../api/apiPosts\";\n\nexport function* addPost(action) {\n  try {\n    const api =yield effect.call(addPosts, action);\n    yield effect.put({ type: typ.ADD_POST, payload: api });\n  } catch (err) {\n    alert(\"error\" + err);\n  }\n}\n\nexport function* viewPosts() {\n  try {\n    const data = yield effect.call(getPosts);\n    yield effect.put({ type: typ.VIEW_POST, payload: data });\n  } catch (err) {\n    alert(\"error\" + err);\n  }\n}\n\nexport function* updatePost(action) {\n  try {\n    yield effect.call(editPost, action);\n    yield effect.put({ type: typ.POST });\n  } catch (err) {\n    alert(\"error\" + err);\n  }\n}\n\nexport function* deletePost(action) {\n  try {\n    yield effect.call(remove , action);\n    yield effect.put({ type: typ.POST });\n  } catch (err) {\n    alert(\"error\" + err);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}